#!/usr/bin/env bash

# MCP Server Setup Script for Claude Code
# This script manages MCP (Model Context Protocol) servers for use with Claude
# Run this in each project to ensure MCP servers are properly configured

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Get server name by key
get_server_name() {
    case $1 in
        serena) echo "Serena (Code Development)" ;;
        context7) echo "Context7 (Documentation)" ;;
        zen) echo "Zen (AI Assistant Tools)" ;;
        tavily) echo "Tavily (Web Search)" ;;
        browser) echo "Browser Tools" ;;
        playwright) echo "Playwright" ;;
        *) echo "" ;;
    esac
}

# Get server command by key
get_server_command() {
    case $1 in
        serena) echo 'claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context ide-assistant --project "$PROJECT_DIR"' ;;
        context7) echo 'claude mcp add context7 -- npx -y @upstash/context7-mcp' ;;
        zen) echo 'claude mcp add zen -- sh -c "exec $(which uvx || echo uvx) --from git+https://github.com/BeehiveInnovations/zen-mcp-server.git zen-mcp-server"' ;;
        tavily) echo 'claude mcp add tavily -- sh -c "exec npx -y tavily-mcp@latest"' ;;
        browser) echo 'claude mcp add browsermcp -- sh -c "exec npx @browsermcp/mcp@latest"' ;;
        playwright) echo 'claude mcp add playwright -- sh -c "exec npx @playwright/mcp@latest"' ;;
        *) echo "" ;;
    esac
}

# Get all server keys
get_all_server_keys() {
    echo "serena context7 zen tavily browser playwright"
}

# Check for required environment variables
check_environment() {
    local missing_vars=()
    local required_vars=(
        "OPENAI_API_KEY"
        "ANTHROPIC_API_KEY"
        "GOOGLE_CLOUD_PROJECT"
        "TAVILY_API_KEY"
    )
    
    print_status "Checking required environment variables..."
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        else
            echo "  âœ“ $var is set"
        fi
    done
    
    if [ ${#missing_vars[@]} -ne 0 ]; then
        print_error "Missing required environment variables:"
        for var in "${missing_vars[@]}"; do
            echo "  - $var"
        done
        echo ""
        echo "Please set these environment variables before continuing."
        echo "You can add them to your shell profile or .env file."
        exit 1
    fi
    
    print_status "All required environment variables are set âœ“"
}

# Check for required tools
check_requirements() {
    local missing_tools=()
    
    print_status "Checking required tools..."
    
    # Check for uv/uvx
    if ! command -v uvx &> /dev/null && ! command -v uv &> /dev/null; then
        missing_tools+=("uv/uvx")
    else
        echo "  âœ“ uv/uvx found"
    fi
    
    # Check for npm/npx
    if ! command -v npx &> /dev/null; then
        missing_tools+=("npx")
    else
        echo "  âœ“ npx found"
    fi
    
    # Check for claude CLI
    if ! command -v claude &> /dev/null; then
        missing_tools+=("claude")
    else
        echo "  âœ“ claude CLI found"
    fi
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        echo ""
        echo "Installation instructions:"
        echo "  - uv/uvx: curl -LsSf https://astral.sh/uv/install.sh | sh"
        echo "  - npx: Install Node.js (https://nodejs.org/)"
        echo "  - claude: See https://docs.anthropic.com/en/docs/claude-code"
        exit 1
    fi
    
    print_status "All required tools are installed âœ“"
}

# Function to install a single MCP server
install_server() {
    local server_key=$1
    local server_name=$(get_server_name "$server_key")
    local server_command=$(get_server_command "$server_key")
    
    if [ -z "$server_name" ]; then
        print_error "Unknown server: $server_key"
        return 1
    fi
    
    print_status "Installing $server_name..."
    
    # Evaluate the command with PROJECT_DIR substitution
    if eval "$server_command"; then
        print_status "âœ“ $server_name installed successfully"
        
        # For Serena, provide instructions about project name configuration
        if [ "$server_key" = "serena" ]; then
            local default_name="$(basename "$PROJECT_DIR")"
            local project_name=""
            
            if [ "$NON_INTERACTIVE" = true ]; then
                # Non-interactive mode: use provided name or default
                if [ -n "$SERENA_PROJECT_NAME" ]; then
                    project_name="$SERENA_PROJECT_NAME"
                else
                    project_name="$default_name"
                fi
            else
                # Interactive mode: prompt for desired name
                echo ""
                echo "Serena will create .serena/project.yml when first connected in Claude Code."
                echo "The default project name will be: '$default_name'"
                echo "For monorepos or multiple checkouts, you should use a unique name."
                echo ""
                
                read -p "What project name would you like to use? (default: $default_name): " project_name
                project_name="${project_name:-$default_name}"
            fi
            
            # Store the project name for later reference
            export SERENA_CHOSEN_NAME="$project_name"
            
            if [ "$project_name" != "$default_name" ]; then
                echo ""
                print_info "IMPORTANT: After first connecting to Serena in Claude Code:"
                print_info "1. Edit $PROJECT_DIR/.serena/project.yml"
                print_info "2. Change 'project_name' to: $project_name"
                echo ""
            fi
        fi
        
        return 0
    else
        print_error "âœ— Failed to install $server_name"
        return 1
    fi
}

# Function to uninstall a single MCP server
uninstall_server() {
    local server_key=$1
    local server_name=$(get_server_name "$server_key")
    
    if [ -z "$server_name" ]; then
        print_error "Unknown server: $server_key"
        return 1
    fi
    
    print_status "Uninstalling $server_name..."
    
    # Map server keys to claude mcp names
    local mcp_name=$server_key
    if [ "$server_key" = "browser" ]; then
        mcp_name="browsermcp"
    fi
    
    if claude mcp remove "$mcp_name"; then
        print_status "âœ“ $server_name uninstalled successfully"
        return 0
    else
        print_error "âœ— Failed to uninstall $server_name"
        return 1
    fi
}

# Install command handler
handle_install() {
    shift # Remove 'install' from arguments
    local project_dir=""
    local servers_to_install=()
    local install_all=false
    export SERENA_PROJECT_NAME=""
    export NON_INTERACTIVE=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all)
                install_all=true
                shift
                ;;
            --non-interactive|-n)
                NON_INTERACTIVE=true
                shift
                ;;
            --serena-project-name)
                if [ -z "$2" ]; then
                    print_error "Option --serena-project-name requires a value"
                    exit 1
                fi
                SERENA_PROJECT_NAME="$2"
                shift 2
                ;;
            -*)
                print_error "Unknown option: $1"
                exit 1
                ;;
            *)
                # If no servers specified yet and this looks like a path, it's the project directory
                if [ ${#servers_to_install[@]} -eq 0 ] && [ -d "$1" ]; then
                    project_dir="$1"
                else
                    servers_to_install+=("$1")
                fi
                shift
                ;;
        esac
    done
    
    # Set project directory
    project_dir="${project_dir:-$(pwd)}"
    project_dir=$(cd "$project_dir" 2>/dev/null && pwd || echo "$project_dir")
    
    if [ ! -d "$project_dir" ]; then
        print_error "Directory does not exist: $project_dir"
        exit 1
    fi
    
    export PROJECT_DIR="$project_dir"
    
    # If no servers specified and not --all, default to all
    if [ ${#servers_to_install[@]} -eq 0 ] && [ "$install_all" = false ]; then
        install_all=true
    fi
    
    # Determine which servers to install
    if [ "$install_all" = true ]; then
        servers_to_install=($(get_all_server_keys))
    fi
    
    print_info "MCP Server Setup for project: $project_dir"
    echo ""
    check_environment
    echo ""
    check_requirements
    echo ""
    
    # Install servers
    local failed=()
    local installed=()
    
    for server in "${servers_to_install[@]}"; do
        if install_server "$server"; then
            installed+=("$server")
        else
            failed+=("$server")
        fi
    done
    
    echo ""
    if [ ${#failed[@]} -eq 0 ]; then
        print_status "Installation completed successfully! ðŸŽ‰"
        echo ""
        echo "Project: $project_dir"
        echo ""
        
        # Check if Serena was installed
        for server in "${installed[@]}"; do
            if [ "$server" = "serena" ]; then
                echo "Next steps for Serena in Claude Code:"
                echo "  1. First run: 'Read initial instructions'"
                if [ -n "$SERENA_CHOSEN_NAME" ]; then
                    echo "  2. Then run: 'Activate the project $SERENA_CHOSEN_NAME'"
                    if [ "$SERENA_CHOSEN_NAME" != "$(basename "$project_dir")" ]; then
                        echo "  3. After first connection, edit .serena/project.yml to set project_name: $SERENA_CHOSEN_NAME"
                    fi
                else
                    echo "  2. Then run: 'Activate the project [your-project-name]'"
                fi
                echo ""
                break
            fi
        done
        
        echo "Installed servers: ${installed[*]}"
    else
        print_warning "Some servers failed to install: ${failed[*]}"
        if [ ${#installed[@]} -gt 0 ]; then
            echo "Successfully installed: ${installed[*]}"
        fi
    fi
}

# Uninstall command handler
handle_uninstall() {
    shift # Remove 'uninstall' from arguments
    local servers_to_uninstall=()
    local uninstall_all=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all)
                uninstall_all=true
                shift
                ;;
            -*)
                print_error "Unknown option: $1"
                exit 1
                ;;
            *)
                servers_to_uninstall+=("$1")
                shift
                ;;
        esac
    done
    
    # Determine which servers to uninstall
    if [ "$uninstall_all" = true ]; then
        servers_to_uninstall=($(get_all_server_keys))
    elif [ ${#servers_to_uninstall[@]} -eq 0 ]; then
        print_error "No servers specified. Use server names or --all"
        echo "Available servers: $(get_all_server_keys)"
        exit 1
    fi
    
    # Uninstall servers
    local failed=()
    local uninstalled=()
    
    for server in "${servers_to_uninstall[@]}"; do
        if uninstall_server "$server"; then
            uninstalled+=("$server")
        else
            failed+=("$server")
        fi
    done
    
    echo ""
    if [ ${#failed[@]} -eq 0 ]; then
        print_status "Uninstallation completed successfully!"
        echo "Uninstalled servers: ${uninstalled[*]}"
    else
        print_warning "Some servers failed to uninstall: ${failed[*]}"
        if [ ${#uninstalled[@]} -gt 0 ]; then
            echo "Successfully uninstalled: ${uninstalled[*]}"
        fi
    fi
}

# Function to show server status
show_status() {
    print_status "Checking MCP server status..."
    
    if command -v claude &> /dev/null; then
        claude mcp list
    else
        print_error "Claude CLI not found. Cannot check server status."
    fi
}

# Function to show help
show_help() {
    echo "MCP Server Setup Script for Claude Code"
    echo ""
    echo "Usage: $(basename "$0") <command> [options] [arguments]"
    echo ""
    echo "Commands:"
    echo "  install [servers...] [dir]   Install MCP servers (defaults to all servers)"
    echo "  uninstall <servers...>       Uninstall MCP servers"
    echo "  status                       Show current MCP server status"
    echo "  help                         Show this help message"
    echo ""
    echo "Install examples:"
    echo "  $(basename "$0") install                   # Install all servers for current directory"
    echo "  $(basename "$0") install --all             # Explicitly install all servers"
    echo "  $(basename "$0") install serena            # Install only serena"
    echo "  $(basename "$0") install serena zen        # Install multiple servers"
    echo "  $(basename "$0") install ~/Projects/app    # Install all servers for specific directory"
    echo "  $(basename "$0") install serena ~/Projects/app  # Install serena for specific directory"
    echo ""
    echo "Install options:"
    echo "  --non-interactive, -n                      # Don't prompt for input"
    echo "  --serena-project-name <name>               # Set Serena project name (for non-interactive mode)"
    echo ""
    echo "Non-interactive example:"
    echo "  $(basename "$0") install --non-interactive --serena-project-name myapp-frontend"
    echo ""
    echo "Uninstall examples:"
    echo "  $(basename "$0") uninstall serena          # Uninstall serena"
    echo "  $(basename "$0") uninstall serena zen      # Uninstall multiple servers"
    echo "  $(basename "$0") uninstall --all           # Uninstall all servers"
    echo ""
    echo "Available servers:"
    local all_keys=$(get_all_server_keys)
    for key in $all_keys; do
        echo "  â€¢ $key - $(get_server_name "$key")"
    done
    echo ""
    echo "Required environment variables:"
    echo "  â€¢ OPENAI_API_KEY"
    echo "  â€¢ ANTHROPIC_API_KEY"
    echo "  â€¢ GOOGLE_CLOUD_PROJECT"
    echo "  â€¢ TAVILY_API_KEY"
}

# Main script logic
main() {
    local command=${1:-help}
    
    case $command in
        install)
            handle_install "$@"
            ;;
        uninstall)
            handle_uninstall "$@"
            ;;
        status)
            show_status
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"